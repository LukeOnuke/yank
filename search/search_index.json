{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction to yank What is yank? Yank is a secure and low impact minecraft server manager that also provides an api for automated managing of servers. Total downloads : How it looks? Like this! Console Status","title":"Introduction to yank"},{"location":"index.html#introduction-to-yank","text":"","title":"Introduction to yank"},{"location":"index.html#what-is-yank","text":"Yank is a secure and low impact minecraft server manager that also provides an api for automated managing of servers. Total downloads :","title":"What is yank?"},{"location":"index.html#how-it-looks","text":"Like this! Console Status","title":"How it looks?"},{"location":"errors.html","text":"Errors explained This page provides insight into the various error prompts that you might come across, this page is mostly directly linked to on the error prompt, so no need to memorise what's what. Connection to the server can not be established. The client couldn't connect to the server. This could be caused by : - The client's internet not functioning. - The server being down. If that is the case, contact the administrator. If you are the administrator, restart the yank process. If that doesn't work, the logs should provide enough info. ServerFilesNotLockedTest If this test failed that means that the files are locked , or they are not present. ProgramPropertiesTest This test fails when it can't write to the properties on first startup. UserConfTest This test fails when it can't write to user.conf on first startup.","title":"Errors"},{"location":"errors.html#errors-explained","text":"This page provides insight into the various error prompts that you might come across, this page is mostly directly linked to on the error prompt, so no need to memorise what's what.","title":"Errors explained"},{"location":"errors.html#connection-to-the-server-can-not-be-established","text":"The client couldn't connect to the server. This could be caused by : - The client's internet not functioning. - The server being down. If that is the case, contact the administrator. If you are the administrator, restart the yank process. If that doesn't work, the logs should provide enough info.","title":"Connection to the server can not be established."},{"location":"errors.html#serverfilesnotlockedtest","text":"If this test failed that means that the files are locked , or they are not present.","title":"ServerFilesNotLockedTest"},{"location":"errors.html#programpropertiestest","text":"This test fails when it can't write to the properties on first startup.","title":"ProgramPropertiesTest"},{"location":"errors.html#userconftest","text":"This test fails when it can't write to user.conf on first startup.","title":"UserConfTest"},{"location":"start.html","text":"Start Step 1, downloading yank Download the jar from releases Step 2 Execute the jar for it to finish first time setup, then edit the program.properties file . The program has a selftest feature and will exit with code -1 , that is normal for this stage of setting it up. program.properties spring.security.oauth2.client.registration.google.client-id=<google-oauth2-client-id> spring.security.oauth2.client.registration.google.client-secret=<google-oauth2-client-secret> spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:h2:file:<full path to db file (see example)> minecraft.server.ip=<server-ip> minecraft.server.port=<server-port> minecraft.server.start=java -Xmx5120M -Xms1024M -jar server.jar -nogui For example /home/users/mcserver/yank/db will use the yank folder in /home/users/mcserver and create the db files starting with the db prefix. \u26a0\u26a0\u26a0 It has to be an absolute filepath \u26a0\u26a0\u26a0 Step 3, create google oauth keys Setting up OAuth 2.0 \u2139 this part of the guide, detailing oauth setup has been taken from Google Identity, oauth 2 setup published by google identity Obtain OAuth 2.0 credentials You need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. To view the client ID and client secret for a given OAuth 2.0 credential, click the following text: Select credential. In the window that opens, choose your project and the credential you want, then click View. Or, view your client ID and client secret from the Credentials page in API Console: Go to the Credentials page. Click the name of your credential or the pencil (create) icon. Your client ID and secret are at the top of the page. Set a redirect URI The redirect URI that you set in the API Console determines where Google sends responses to your authentication requests. Important for setup You need to set the redirect URI to <yourdomain>:8080 Also here you check your client id and client secret and input them to the properties file that has been generated after running the application for the first time properties spring.security.oauth2.client.registration.google.client-id=<client id> spring.security.oauth2.client.registration.google.client-secret=<client secret> Example image (yourdomain.example.com is a placeholder domain): To create, view, or edit the redirect URIs for a given OAuth 2.0 credential, do the following: Go to the Credentials page. In the OAuth 2.0 client IDs section of the page, click a credential. View or edit the redirect URIs. If there is no OAuth 2.0 client IDs section on the Credentials page, then your project has no OAuth credentials. To create one, click Create credentials. Customize the user consent screen If google doesn't prompt you to do this you can skip it, but it's nice to do. For your users, the OAuth 2.0 authentication experience includes a consent screen that describes the information that the user is releasing and the terms that apply. For example, when the user logs in, they might be asked to give your app access to their email address and basic account information. You request access to this information using the scope parameter, which your app includes in its authentication request. You can also use scopes to request access to other Google APIs. The user consent screen also presents branding information such as your product name, logo, and a homepage URL. You control the branding information in the API Console. To enable your project's consent screen: Open the Consent Screen page in the Google API Console. If prompted, select a project, or create a new one. Fill out the form and click Save. The following consent dialog shows what a user would see when a combination of OAuth 2.0 and Google Drive scopes are present in the request. (This generic dialog was generated using the Google OAuth 2.0 Playground, so it does not include branding information that would be set in the API Console.) Step 4, user.conf setup Add the users.conf file in the folder where the jar is located. The users.conf file contains the email addresses of the users that have access to the webinterface, they are separated by newlines. For example: users.conf johndoe@gmail.com nn.pearson@gmail.com superuser@gmail.com Step 5, minecraft server setup Get the minecraft server of your choice, rename it to server.jar and put it in the directory <dir-where-yank-is-located>/server Finally you are done, start yank again and if you've done everything right it should start, navigate to http://localhost:8080 or http://yourdomain.example.com:8080 and it should work. Still need help? Luckily we have a discord server! https://discord.gg/VVuQB868wU","title":"Start"},{"location":"start.html#start","text":"","title":"Start"},{"location":"start.html#step-1-downloading-yank","text":"Download the jar from releases","title":"Step 1, downloading yank"},{"location":"start.html#step-2","text":"Execute the jar for it to finish first time setup, then edit the program.properties file . The program has a selftest feature and will exit with code -1 , that is normal for this stage of setting it up. program.properties spring.security.oauth2.client.registration.google.client-id=<google-oauth2-client-id> spring.security.oauth2.client.registration.google.client-secret=<google-oauth2-client-secret> spring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:h2:file:<full path to db file (see example)> minecraft.server.ip=<server-ip> minecraft.server.port=<server-port> minecraft.server.start=java -Xmx5120M -Xms1024M -jar server.jar -nogui For example /home/users/mcserver/yank/db will use the yank folder in /home/users/mcserver and create the db files starting with the db prefix. \u26a0\u26a0\u26a0 It has to be an absolute filepath \u26a0\u26a0\u26a0","title":"Step 2"},{"location":"start.html#step-3-create-google-oauth-keys","text":"","title":"Step 3, create google oauth keys"},{"location":"start.html#setting-up-oauth-20","text":"\u2139 this part of the guide, detailing oauth setup has been taken from Google Identity, oauth 2 setup published by google identity","title":"Setting up OAuth 2.0"},{"location":"start.html#obtain-oauth-20-credentials","text":"You need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. To view the client ID and client secret for a given OAuth 2.0 credential, click the following text: Select credential. In the window that opens, choose your project and the credential you want, then click View. Or, view your client ID and client secret from the Credentials page in API Console: Go to the Credentials page. Click the name of your credential or the pencil (create) icon. Your client ID and secret are at the top of the page. Set a redirect URI The redirect URI that you set in the API Console determines where Google sends responses to your authentication requests.","title":"Obtain OAuth 2.0 credentials"},{"location":"start.html#important-for-setup","text":"You need to set the redirect URI to <yourdomain>:8080 Also here you check your client id and client secret and input them to the properties file that has been generated after running the application for the first time properties spring.security.oauth2.client.registration.google.client-id=<client id> spring.security.oauth2.client.registration.google.client-secret=<client secret> Example image (yourdomain.example.com is a placeholder domain): To create, view, or edit the redirect URIs for a given OAuth 2.0 credential, do the following: Go to the Credentials page. In the OAuth 2.0 client IDs section of the page, click a credential. View or edit the redirect URIs. If there is no OAuth 2.0 client IDs section on the Credentials page, then your project has no OAuth credentials. To create one, click Create credentials.","title":"Important for setup"},{"location":"start.html#customize-the-user-consent-screen","text":"If google doesn't prompt you to do this you can skip it, but it's nice to do. For your users, the OAuth 2.0 authentication experience includes a consent screen that describes the information that the user is releasing and the terms that apply. For example, when the user logs in, they might be asked to give your app access to their email address and basic account information. You request access to this information using the scope parameter, which your app includes in its authentication request. You can also use scopes to request access to other Google APIs. The user consent screen also presents branding information such as your product name, logo, and a homepage URL. You control the branding information in the API Console. To enable your project's consent screen: Open the Consent Screen page in the Google API Console. If prompted, select a project, or create a new one. Fill out the form and click Save. The following consent dialog shows what a user would see when a combination of OAuth 2.0 and Google Drive scopes are present in the request. (This generic dialog was generated using the Google OAuth 2.0 Playground, so it does not include branding information that would be set in the API Console.)","title":"Customize the user consent screen"},{"location":"start.html#step-4-userconf-setup","text":"Add the users.conf file in the folder where the jar is located. The users.conf file contains the email addresses of the users that have access to the webinterface, they are separated by newlines. For example: users.conf johndoe@gmail.com nn.pearson@gmail.com superuser@gmail.com","title":"Step 4, user.conf setup"},{"location":"start.html#step-5-minecraft-server-setup","text":"Get the minecraft server of your choice, rename it to server.jar and put it in the directory <dir-where-yank-is-located>/server Finally you are done, start yank again and if you've done everything right it should start, navigate to http://localhost:8080 or http://yourdomain.example.com:8080 and it should work.","title":"Step 5, minecraft server setup"},{"location":"start.html#still-need-help","text":"Luckily we have a discord server! https://discord.gg/VVuQB868wU","title":"Still need help?"},{"location":"usageandoperation.html","text":"Quick start usage and operation guide This will all be discussed in more detail but this is the essentials. Operation This section starts you off on operating the yank backend. What java version yank requires? Java 11+ How yank handles the server? Currently yank will run the server and will close when the server closes, this will change in a future version, but currently it is what it is. Can I use tunity, purpur, paper, etc? Yes , as yank handles it as a subprocess, this will be elaborated further in the advanced section. Usage The ui is split in two pages Console Console also serves as the index and looks like this It is split into the console and input bar. Click on the send button to send the command inputted to the server. Status It pings (or queries) the server for game info, when there are players online on the server the players page will have clickable links to a namemc query page of that player. For example, if we click on Fluid64 it will lead us to this page https://namemc.com/profile/Fluid64. Also Fluid64 is just a random player on one of our beta testers server, please don't bother him/her(or whatever the users preferred pronouns are).","title":"Quick start usage and operation guide"},{"location":"usageandoperation.html#quick-start-usage-and-operation-guide","text":"This will all be discussed in more detail but this is the essentials.","title":"Quick start usage and operation guide"},{"location":"usageandoperation.html#operation","text":"This section starts you off on operating the yank backend.","title":"Operation"},{"location":"usageandoperation.html#what-java-version-yank-requires","text":"Java 11+","title":"What java version yank requires?"},{"location":"usageandoperation.html#how-yank-handles-the-server","text":"Currently yank will run the server and will close when the server closes, this will change in a future version, but currently it is what it is.","title":"How yank handles the server?"},{"location":"usageandoperation.html#can-i-use-tunity-purpur-paper-etc","text":"Yes , as yank handles it as a subprocess, this will be elaborated further in the advanced section.","title":"Can I use tunity, purpur, paper, etc?"},{"location":"usageandoperation.html#usage","text":"The ui is split in two pages","title":"Usage"},{"location":"usageandoperation.html#console","text":"Console also serves as the index and looks like this It is split into the console and input bar. Click on the send button to send the command inputted to the server.","title":"Console"},{"location":"usageandoperation.html#status","text":"It pings (or queries) the server for game info, when there are players online on the server the players page will have clickable links to a namemc query page of that player. For example, if we click on Fluid64 it will lead us to this page https://namemc.com/profile/Fluid64. Also Fluid64 is just a random player on one of our beta testers server, please don't bother him/her(or whatever the users preferred pronouns are).","title":"Status"},{"location":"advanced%20operation%20and%20usage/index.html","text":"Arguments Arguments can be used to configure stuff before the program runs. Argument --skiptests Argument --skiptests skips the self-test phase of startup. Property arguments You can set properties with arguments too. Using this format --<key>:<valiue> . Example : --minecraft.server.restartCount:6 will make the server retry starting the internal game server 6 times.","title":"Arguments"},{"location":"advanced%20operation%20and%20usage/index.html#arguments","text":"Arguments can be used to configure stuff before the program runs.","title":"Arguments"},{"location":"advanced%20operation%20and%20usage/index.html#argument-skiptests","text":"Argument --skiptests skips the self-test phase of startup.","title":"Argument --skiptests"},{"location":"advanced%20operation%20and%20usage/index.html#property-arguments","text":"You can set properties with arguments too. Using this format --<key>:<valiue> . Example : --minecraft.server.restartCount:6 will make the server retry starting the internal game server 6 times.","title":"Property arguments"},{"location":"api/index.html","text":"Api documentation for yank Yank exposes an api for managing a server programmatically. It uses google oauth for auth.","title":"Api documentation for yank"},{"location":"api/index.html#api-documentation-for-yank","text":"Yank exposes an api for managing a server programmatically. It uses google oauth for auth.","title":"Api documentation for yank"},{"location":"api/log.html","text":"Log endpoint (/api/v1/log/**) Log objects look like this {\"id\":255, \"message\": \"Example\", \"timestamp\": 152223} Get by id (/api/v1/log/id/{id}) GET /api/v1/log/id/255 Will return a log with id 255 {\"id\":255, \"message\": \"Example\", \"timestamp\": 152223} Get by timestamp (/api/v1/log/timestamp/{timestamp}) GET /api/v1/log/timestamp/152223 Get log entries using the timestamp. Will return a list of logs with the timestamp 152223. [{\"id\":255, \"message\": \"Example 1\", \"timestamp\": 152223}, {\"id\":256, \"message\": \"Example 2\", \"timestamp\": 152223}, {\"id\":257, \"message\": \"Example 3\", \"timestamp\": 152223}] Get latest (/api/v1/log/latest/{pageSize}) Gets the {pageSize} amount of the latest logs, page size can't be more than 20. GET /api/v1/log/latest/3 Will return a list 3 of the latest logs. [{\"id\":255, \"message\": \"Example 1\", \"timestamp\": 152223}, {\"id\":256, \"message\": \"Example 2\", \"timestamp\": 152223}, {\"id\":257, \"message\": \"Example 3\", \"timestamp\": 152223}] Subscribe (/api/v1/log/subscription) Will subscribe you to an event stream of logs. It sends an event when a log is sent to the console.","title":"Log endpoint (/api/v1/log/**)"},{"location":"api/log.html#log-endpoint-apiv1log","text":"Log objects look like this {\"id\":255, \"message\": \"Example\", \"timestamp\": 152223}","title":"Log endpoint (/api/v1/log/**)"},{"location":"api/log.html#get-by-id-apiv1logidid","text":"GET /api/v1/log/id/255 Will return a log with id 255 {\"id\":255, \"message\": \"Example\", \"timestamp\": 152223}","title":"Get by id (/api/v1/log/id/{id})"},{"location":"api/log.html#get-by-timestamp-apiv1logtimestamptimestamp","text":"GET /api/v1/log/timestamp/152223 Get log entries using the timestamp. Will return a list of logs with the timestamp 152223. [{\"id\":255, \"message\": \"Example 1\", \"timestamp\": 152223}, {\"id\":256, \"message\": \"Example 2\", \"timestamp\": 152223}, {\"id\":257, \"message\": \"Example 3\", \"timestamp\": 152223}]","title":"Get by timestamp (/api/v1/log/timestamp/{timestamp})"},{"location":"api/log.html#get-latest-apiv1loglatestpagesize","text":"Gets the {pageSize} amount of the latest logs, page size can't be more than 20. GET /api/v1/log/latest/3 Will return a list 3 of the latest logs. [{\"id\":255, \"message\": \"Example 1\", \"timestamp\": 152223}, {\"id\":256, \"message\": \"Example 2\", \"timestamp\": 152223}, {\"id\":257, \"message\": \"Example 3\", \"timestamp\": 152223}]","title":"Get latest (/api/v1/log/latest/{pageSize})"},{"location":"api/log.html#subscribe-apiv1logsubscription","text":"Will subscribe you to an event stream of logs. It sends an event when a log is sent to the console.","title":"Subscribe (/api/v1/log/subscription)"},{"location":"api/user.html","text":"User endpoint (/api/v1/user/**) This endpoint provides info about the user Me (/api/v1/user/me) Will return info about the logged in user. GET (/api/v1/user/me) Will return { \"picture\": \"link/to/picture\", \"id\": 15531515, \"first_name\": \"John\", \"family_name\": \"Doe\", \"email\": \"johndoe@gmail.com\" } Authorised (/api/v1/user/authorised) PUBLIC ENDPOINT This endpoint is used to indicate to the user if he is authorised, ofc the requests get blocked at the server level. GET (/api/v1/user/authorised) Will return {\"authorised\": false}","title":"User endpoint (/api/v1/user/**)"},{"location":"api/user.html#user-endpoint-apiv1user","text":"This endpoint provides info about the user","title":"User endpoint (/api/v1/user/**)"},{"location":"api/user.html#me-apiv1userme","text":"Will return info about the logged in user. GET (/api/v1/user/me) Will return { \"picture\": \"link/to/picture\", \"id\": 15531515, \"first_name\": \"John\", \"family_name\": \"Doe\", \"email\": \"johndoe@gmail.com\" }","title":"Me (/api/v1/user/me)"},{"location":"api/user.html#authorised-apiv1userauthorised","text":"PUBLIC ENDPOINT This endpoint is used to indicate to the user if he is authorised, ofc the requests get blocked at the server level. GET (/api/v1/user/authorised) Will return {\"authorised\": false}","title":"Authorised (/api/v1/user/authorised)"}]}